<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>rxjs on Living today for tomorrow</title><link>http://localhost/tags/rxjs/</link><description>Recent content in rxjs on Living today for tomorrow</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 31 Aug 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost/tags/rxjs/index.xml" rel="self" type="application/rss+xml"/><item><title>在 Observable 裡做 recursive 操作</title><link>http://localhost/posts/rxjs-expand-operator/</link><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid>http://localhost/posts/rxjs-expand-operator/</guid><description>請參考 expand operator 的說明：
Recursively projects each source value to an Observable which is merged in the output Observable. 在 expand operator 裡主要的判斷是如果離開這個 recursion 就回傳 Rx.Observable.empty()；反之就把需要 recursive 的值修改後再回傳 Observable 物件，於是你的 Observable 物件就可以做類似 loop 的叫用串接了。
小範例如下，是用 AVA 做 test runner：
const Rx = require(&amp;#39;rxjs&amp;#39;); const winston = require(&amp;#39;winston&amp;#39;); const test = require(&amp;#39;ava&amp;#39;); const fetchObs = (count) =&amp;gt; { return Rx.Observable.of({value: count, count: count*2}); }; test(&amp;#39;test expand&amp;#39;, (t) =&amp;gt; { return fetchObs(1) .</description></item></channel></rss>