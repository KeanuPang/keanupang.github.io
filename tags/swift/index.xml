<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>swift on Living today for tomorrow</title><link>https://keanupang.github.io/tags/swift/</link><description>Recent content in swift on Living today for tomorrow</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 03 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://keanupang.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml"/><item><title>快速實驗與驗證功能的小工具 swift-sh</title><link>https://keanupang.github.io/posts/tool_swift_sh_for_prototyping/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://keanupang.github.io/posts/tool_swift_sh_for_prototyping/</guid><description>OK, 我們現在可以用 swift-sh 工具預先安裝到系統裡，這樣子之後只要做小型測試時只要單一個 swift 檔案，裡面標註 import 的敘述，就可以直接執行它。
先安裝好 swift-sh 工具：
brew install swift-sh 然後就可以開始編寫 swift 檔案做小型的驗證：
#!/usr/bin/swift sh import Foundation import PromiseKit // @mxcl ~&amp;gt; 6.5 firstly { after(.seconds(2)) }.then { after(.milliseconds(500)) }.done { print(&amp;#34;notice: two and a half seconds elapsed&amp;#34;) exit(0) } RunLoop.main.run() 要記得檔案最前面的 shebang 要寫明 #!/usr/bin/swift sh 的敘述，這樣系統才會去觸發 swift-sh 工具來處理；以及 import 第三方套件時，要在該行的最後加上註解是哪個 SwiftPM 的來源，甚至可以標註版本。
最後只要把這個檔案加上可執行權限就可以直接執行了。</description></item><item><title>Failable Initializer 筆記</title><link>https://keanupang.github.io/posts/failable_initializer/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate><guid>https://keanupang.github.io/posts/failable_initializer/</guid><description>之前在 這篇文章 看到的。
將自己的 class 來做出一個可以是 optional 的物件，這樣一來使用的時候就必須用 if-let 或 guard 來讀取，在程式上會比較好理解跟處理。
直接上 code：
class FilteredImage { ... init?(with imageName: String) { guard let image = UIImage(named: imageName) else { return nil } self.image = image } } 也就是說在初始化時是用 init? 的方式，確保回傳得到的物件要嘛是 nil 要嘛真的有值，而且對應的屬性也保證有值。
使用上也因為初始化回傳的是 optional 物件，限制了使用者必須用 if-let 或 guard 來拿取：
guard let filteredImage = FilteredImage(with: &amp;#34;bird&amp;#34;) else { // filteredImage is nil return } // filteredImage is initialized and we use it normally 然後要保持一個原則，回傳是 nil 一定是因為初始化失敗而得到的，如果是後面的行為造成的話等於權責不分無法抓住問題：</description></item></channel></rss>