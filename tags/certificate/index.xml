<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>certificate on Living today for tomorrow</title><link>http://localhost/tags/certificate/</link><description>Recent content in certificate on Living today for tomorrow</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 30 Apr 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost/tags/certificate/index.xml" rel="self" type="application/rss+xml"/><item><title>Create a Self-Signed Certificate</title><link>http://localhost/posts/create-self-signed-certificate/</link><pubDate>Sat, 30 Apr 2016 00:00:00 +0000</pubDate><guid>http://localhost/posts/create-self-signed-certificate/</guid><description>在工作上因為每過一陣子就會用到，但又常常忘記步驟所以筆記一下。
先用 opeenssl 指令產生私鑰跟 CSR 檔︰
openssl req -x509 -sha256 -days 3652 -newkey rsa:2048 -keyout server.key -out server.csr 建立憑證檔案︰
openssl x509 -sha256 -days 3652 -in server.csr -signkey server.key -out selfsigned.crt 將剛剛的憑證檔案轉成 P12 格式︰
openssl pkcs12 -export -name cert_server -in selfsigned.crt -inkey server.key -out keystore.p12 最後透過 Java 的 keytool 工具轉成適合 Java 環境使用的 JKS 格式憑證檔案︰
keytool -importkeystore -destkeystore keystore.jks -srckeystore keystore.p12 -srcstoretype pkcs12 -alias cert_server 完成收工。</description></item></channel></rss>