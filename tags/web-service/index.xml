<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>web-service on Living today for tomorrow</title><link>http://localhost/tags/web-service/</link><description>Recent content in web-service on Living today for tomorrow</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 12 Dec 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost/tags/web-service/index.xml" rel="self" type="application/rss+xml"/><item><title>建立 DynamoDB 的 Incremental ID 機制</title><link>http://localhost/posts/dynamodb-incremental-id/</link><pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate><guid>http://localhost/posts/dynamodb-incremental-id/</guid><description>需要在 DynamoDB 的某個 table 的 Hash Key 是用 auto increment 的方式儲存 id，不過如果只單靠一張 table 有點難完成這樣的機制，所以需要再生另一張 table 用來存放目前的值，讓原本的 table 可以去參考以取得新增後的數值回來儲存。
可以參考這篇：How to make a UUID in DynamoDB?，做法大概就是像這樣：
Each time you want to generate a new id, you would do the following:
Do a GetItem on NextIdTable to read the current value of Counter → curValue
Do a PutItem on NextIdTable to set the value of Counter to curValue + 1. Make this a conditional &amp;gt; PutItem so that it will fail if the value of Counter has changed.</description></item><item><title>Connect-Redis 套件更新 Session 過期時間的方式</title><link>http://localhost/posts/configure-redis-session-timeout/</link><pubDate>Mon, 14 Nov 2016 00:00:00 +0000</pubDate><guid>http://localhost/posts/configure-redis-session-timeout/</guid><description>在使用 Express 架設網站時，且因為 cluster 的考量，會將 Session cookie 的資訊往外拉，通常都是使用 Redis 來儲存使用者的 Session。在 Express 裡會透過 connect-redis 的套件來串接兩者，以及使用者登入的檢查就使用 passport 套件來幫我們完成。
在 Express 裡的設定結構大概會是這樣︰
let sessionMiddleware = session({ store: new RedisStore({ host: hostname, port: port, db: db * 1, ttl: 3600 }), resave: false, saveUninitialized: false }); app.middleware(‘session’, sessionMiddleware); 這時候的困難點會是當未登入的使用者可能需要 session cookie 的 maxAge 會比較短期，例如需要是處在 recaptcha 的驗證階段；直到使用者順利登入後，才需要更新 session cookie 的 maxAge 為合理的時間。也就是 Redis 的 TTL 設定是動態的方式調整。
參考這裡的 討論 的做法則會是固定將 TTL 設為 0，並在使用者登入後才更新 maxAge。所以 RedisStore 的設定將會是︰</description></item><item><title>自定 Retrofit 的 DELETE Annotation</title><link>http://localhost/posts/custom-retrofit-delete-annotation/</link><pubDate>Wed, 04 May 2016 00:00:00 +0000</pubDate><guid>http://localhost/posts/custom-retrofit-delete-annotation/</guid><description>一般使用 Jersey 或 RESTEasy 所建立的 JAX-RS Web Service，是允許 client 呼叫 DELETE method 時可以加上 Message Body，就跟 POST method 一樣我們可以取得 Body 裡的內容。
但 Client 如果是使用 Retrofit 來呼叫 Web Service 的 DELETE method 並且加上 Body annotation 夾帶資料過去時，卻會得到如下的訊息而被中止︰
Non-body HTTP method cannot contain @Body or @TypedOutput. 對 Retrofit 來說是照著 W3C 的標準去實作，於是這樣的行為就跟一般坊間的 http client 不太一樣。
最快的方法就是自定一個可以允許夾帶資料的 DELETE Annotation，讓 Retrofit 可以參照︰
import static java.lang.annotation.ElementType.METHOD; import static java.lang.annotation.RetentionPolicy.RUNTIME; import java.lang.annotation.Retention; import java.lang.annotation.Target; import retrofit.http.RestMethod; @Target(METHOD) @Retention(RUNTIME) @RestMethod(value = “DELETE”, hasBody = true) public @interface DELETE { String value(); } 然後在自己的 Retrofit Service 使用這個 DELETE annotation 就可以了︰</description></item></channel></rss>